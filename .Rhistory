source('~/.active-rstudio-document')
fibonacci_even_hw()
1:10
-1:10
m = 10
rev(1:length(m)/2)
rev(1:length(m/2))
rev(1:m/2)
rev(1:(m/2))
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
6%%3
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
n = 15
m = n/2
m
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
n = 16
m = round(n/2)
m
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime()
source('~/.active-rstudio-document')
largest_prime(18)
largest_prime(24)
largest_prime(31)
x = 31
m = round(x/2)
m
?round
m = floor(x/2)
m
source('~/.active-rstudio-document')
largest_prime(31)
x/8
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
largest_prime(31)
source('~/.active-rstudio-document')
largest_prime(31)
source('~/.active-rstudio-document')
largest_prime(31)
source('~/.active-rstudio-document')
largest_prime(31)
source('~/.active-rstudio-document')
largest_prime(31)
source('~/.active-rstudio-document')
largest_prime(31)
largest_prime(32)
source('~/.active-rstudio-document')
largest_prime(32)
source('~/.active-rstudio-document')
largest_prime(32)
source('~/.active-rstudio-document')
largest_prime(32)
source('~/.active-rstudio-document')
largest_prime(32)
source('~/.active-rstudio-document')
largest_prime(32)
largest_prime(32)
h = largest_prime(32)
h
x = 32
m = floor(x/2.0)
m
floor(32/2)
largest_prime = function(x){
m = floor(x/2.0)
while(m>0){
if(x%%m != 0){
m = m-1
print(m)
}else{
print(m)
break; print(m)
}
}
}
h = largest_prime(32)
h = largest_prime(31)
h = largest_prime(28)
setwd("C:/Users/TimBo/Downloads/R docs and scripts/CongressSNA")
Congress = read.csv('113thCongress.csv', header = TRUE)
Congress = Congress[,-c(13,14,18,20,23,24,26,33,51,60,62,77)] #remove excluded bills
Congress[is.na(Congress)] = 0 #replace NAs with 0s
library(stringr)
Reps = str_detect(Congress$Senator.Rep, 'Rep') #Separate Senate from House of Reps
Senate = Congress[Reps,]
Senate$Senator.Rep = gsub('Rep', '', Senate$Senator.Rep) #Strip title
Senate$Senator.Rep
Senate$Senator.Rep = str_trim(Senate$Senator.Rep, side='both') #Remove Whitespace
library(plyr)
library(dplyr)
DSenate = filter(Senate, Party == 'D')
RSenate = filter(Senate, Party == 'R')
rownames(RSenate) = RSenate$Senator.Rep
rownames(DSenate) = DSenate$Senator.Rep
DSenate = DSenate[,-(1:2)] #Creates Adj Matrix for within/across links
RSenate = RSenate[,-(1:2)]
DemsWithin = rowSums(as.matrix(DSenate) %*%t(as.matrix(DSenate)))
RepsWithin = rowSums(as.matrix(RSenate) %*%t(as.matrix(RSenate)))
Coopertivity = rowSums(as.matrix(DSenate) %*%t(as.matrix(RSenate)))
Coopertivity2 = rowSums(as.matrix(RSenate) %*%t(as.matrix(DSenate)))
WithinParty = c(RepsWithin, DemsWithin)
AcrossAisle = c(Coopertivity, Coopertivity2)
Links = merge(WithinParty,AcrossAisle,by=0)
colnames(Links) = c('Name','Within','Coopertivity')
rownames(Senate) = Senate$Senator.Rep #Simplify DF to matrix
Party = Senate$Party
Senate = Senate[,-(1:2)]
SenateAdj = as.matrix(Senate) %*% t(as.matrix(Senate)) #Create adjacency matrix
library(igraph)
g = graph.adjacency(SenateAdj, mode = 'undirected', weighted = TRUE) #Create plot object
g= simplify(g) #gets rid of loops within vertices - code to show weight in Edges!!
V(g)$color = ifelse(Party == 'D', 'blue', 'red')
V(g)$label = V(g)$name #get rid of title, resize smaller name
V(g)$label.cex = 0.5
detach('package:sna', unload=T)
SenateCent = data.frame(bet = betweenness(g), eig = evcent(g)$vector) #regress Eigenvector on Betweenness
res = lm(eig~bet, data = SenateCent)$residuals
SenateCent = transform(SenateCent, res=res)
library(ggplot2)
SenateActors = ggplot(SenateCent, (aes(x=bet, y=eig, label = rownames(SenateCent),color=Party, size = abs(res))))+xlab('Betweenness Centrality')+ylab('Eigenvector Centrality')
SenateActors+scale_color_manual(values=c('blue','red'))+geom_text()+labs(title = 'Eigenvector and Betweenness Centrality') #Add title and make geom text
#following analysis not useful
grep('Rodgers', Senate)
grep('Rodgers', Senate$Senator.Rep)
grep('Rodgers', rownames(Senate))
head(rownames(Senate))
Congress = read.csv('113thCongress.csv', header = TRUE)
Congress = Congress[,-c(13,14,18,20,23,24,26,33,51,60,62,77)] #remove excluded bills
Congress[is.na(Congress)] = 0 #replace NAs with 0s
library(stringr)
Reps = str_detect(Congress$Senator.Rep, 'Rep') #Separate Senate from House of Reps
Senate = Congress[Reps,]
Senate$Senator.Rep = gsub('Rep', '', Senate$Senator.Rep) #Strip title
Senate$Senator.Rep = str_trim(Senate$Senator.Rep, side='both') #Remove Whitespace
library(plyr)
library(dplyr)
DSenate = filter(Senate, Party == 'D')
RSenate = filter(Senate, Party == 'R')
rownames(RSenate) = RSenate$Senator.Rep
grep('Rodgers', Senate$Senator.Rep)
grep('Rodge', Senate$Senator.Rep)
grep('Rogers', Senate$Senator.Rep)
Senate[grep('Rogers', Senate$Senator.Rep),]
Senate = Senate[-232:233,]
Senate = Senate[-(232:233),]
grep('Rogers', Senate$Senator.Rep)
rownames(RSenate) = RSenate$Senator.Rep
rownames(DSenate) = DSenate$Senator.Rep
rownames(RSenate) = RSenate$Senator.Rep
DSenate = filter(Senate, Party == 'D')
RSenate = filter(Senate, Party == 'R')
rownames(RSenate) = RSenate$Senator.Rep
rownames(DSenate) = DSenate$Senator.Rep
DSenate = DSenate[,-(1:2)] #Creates Adj Matrix for within/across links
RSenate = RSenate[,-(1:2)]
DemsWithin = rowSums(as.matrix(DSenate) %*%t(as.matrix(DSenate)))
RepsWithin = rowSums(as.matrix(RSenate) %*%t(as.matrix(RSenate)))
Coopertivity = rowSums(as.matrix(DSenate) %*%t(as.matrix(RSenate)))
Coopertivity2 = rowSums(as.matrix(RSenate) %*%t(as.matrix(DSenate)))
WithinParty = c(RepsWithin, DemsWithin)
AcrossAisle = c(Coopertivity, Coopertivity2)
Links = merge(WithinParty,AcrossAisle,by=0)
colnames(Links) = c('Name','Within','Coopertivity')
rownames(Senate) = Senate$Senator.Rep #Simplify DF to matrix
Party = Senate$Party
Senate = Senate[,-(1:2)]
SenateAdj = as.matrix(Senate) %*% t(as.matrix(Senate)) #Create adjacency matrix
library(igraph)
g = graph.adjacency(SenateAdj, mode = 'undirected', weighted = TRUE) #Create plot object
g= simplify(g) #gets rid of loops within vertices - code to show weight in Edges!!
V(g)$color = ifelse(Party == 'D', 'blue', 'red')
V(g)$label = V(g)$name #get rid of title, resize smaller name
V(g)$label.cex = 0.5
layout1 = layout.fruchterman.reingold(g)
detach('package:sna', unload=T)
SenateCent = data.frame(bet = betweenness(g), eig = evcent(g)$vector) #regress Eigenvector on Betweenness
res = lm(eig~bet, data = SenateCent)$residuals
SenateCent = transform(SenateCent, res=res)
library(ggplot2)
SenateActors = ggplot(SenateCent, (aes(x=bet, y=eig, label = rownames(SenateCent),color=Party, size = abs(res))))+xlab('Betweenness Centrality')+ylab('Eigenvector Centrality')
SenateActors+scale_color_manual(values=c('blue','red'))+geom_text()+labs(title = 'Eigenvector and Betweenness Centrality') #Add title and make geom text
#following analysis not useful
layout1 = layout.fruchterman.reingold(g, niter=500)
nodes = as.vector(V(g))
nodes[which(abs(res)<.3)] = NA
nodes = ifelse(nodes =='NA', 'NA', rownames(SenateAdj))
plot(g, layout = layout1, vertex.label=nodes, vertex.size = SenateCent$bet, vertex.label.dist = 0.25, edge.width = E(g)$weight, vertex.label.color = 'black')
cores = graph.coreness(g)
g2 = induced.subgraph(g, as.vector(which(cores>50)))
nodes = as.vector(V(g2))
nodes = V(g2)$name
#nodes[which(abs(res)<.3)] = NA
layout2 = layout.fruchterman.reingold(g2, niter=500)
plot(g2, layout = layout2, vertex.label=nodes, vertex.size = abs(res)*50, vertex.label.dist = 0.25, vertex.label.color = 'black')
library(sna)
library(ggdendro)
set.seed(200)
SenateClust = equiv.clust(SenateAdj, method='hamming', cluster.method='ward.D')
den = as.dendrogram(SenateClust$cluster)
ddata = dendro_data(den, type='rectangle')
ddata$labels[,3] = rownames(SenateAdj)
ddata$labels = cbind(ddata$labels, Party)
ggplot() +
geom_segment(data=segment(ddata), aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data = label(ddata), aes(x=x, y=y, label=label, colour = Party, hjust=0), size=1) +
geom_point(data = label(ddata), aes(x=x, y=y), size=3, shape = 21) +
coord_flip() +
scale_y_reverse(expand=c(0.2, 0)) +
scale_colour_manual(values=c('blue','red')) +
theme_dendro()
hClustAssignments = cutree(SenateClust$cluster, k=6)
set.seed(200)
wc = walktrap.community(g) #seeCommunities
plot(wc, g)
walktrapComm = wc$membership
Coopertivity = data.frame(Name = rownames(SenateAdj), Party = Party, hClustAssign = hClustAssignments, wtComm = walktrapComm)
Coopertivity = merge(Coopertivity, Links, by.x='Name', by.y='Name')
Elect = read.csv('CongressElection.csv')
Elect$Incumbent = sapply(Elect$Incumbent, function(x) strsplit(as.character(x), split=' '))
Elect$Incumbent = sapply(Elect$Incumbent, rev)
Elect$Incumbent = unlist(lapply(Elect$Incumbent, paste, collapse = ', '))
nrow(Coopertivity)
nrow(merge(Coopertivity, Elect, by.x='Name', by.y='Incumbent'))
?merge
Total = merge(Coopertivity, Elect, by.x='Name', by.y='Incumbent')
head(Total)
Total = Total[,-7]
head(Total)
table(Winner)
table(Total$Winner)
table(Total$Party, Total$Winner)
range(Total$Within)
range(Total$Coopertivity)
range(Total$Terms)
nrow(Total)
281/328
Total = merge(Coopertivity, Elect, by.x='Name', by.y='Incumbent', all=T)
nrow(Total)
Total
Total = merge(Coopertivity, Elect, by.x='Name', by.y='Incumbent')
colnames(Total)
class(Total$Party)
class(Total$hClustAssign)
class(Total$wtComm)
class(Total$Within)
class(Total$Coopertivity)
class(Total$Terms)
class(Total$Winner)
Total = Total[,-7]
Total$hClustAssign = as.factor(Total$hClustAssign)
Total$wtComm = as.factor(Total$wtComm)
j = glm(Winner ~ Party+hClustAssign+wtComm+Within+Coopertivity+Terms, data=Total)
summary(j)
plot(j)
j = glm(Winner ~ Party+hClustAssign+wtComm+Within+Coopertivity+Terms, family=binomial, data=Total)
summary(j)
?glm
j = glm(Winner ~ Party+Within+Coopertivity+Terms, family=binomial, data=Total)
summary(j)
j = glm(Winner ~ Party+Within+Terms, family=binomial, data=Total)
summary(j)
j = glm(Winner ~ Within+Terms, family=binomial, data=Total)
summary(j)
j = glm(Winner ~ Coopertivity+Terms, family=binomial, data=Total)
summary(j)
j = glm(Winner ~ hClustAssign+Terms, family=binomial, data=Total)
summary(j)
j = glm(Winner ~ wtComm+Terms, family=binomial, data=Total)
summary(j)
j = glm(Winner ~ Party+Terms, family=binomial, data=Total)
summary(j)
j = glm(Winner ~ Party+hClustAssign+wtComm+Within+Coopertivity+Terms, family=binomial, data=Total)
j
summary(j)
setwd("C:/Users/TimBo/Downloads/R docs and scripts")
source('regress.r')
predict.plot(Winner~. data=Total)
head(Total)
?predict.plot
predict.plot(Winner~. Total)
predict.plot(Winner ~ . Total)
predict.plot(Winner ~ ., Total)
step.up(j)
predict.plot(j)
range(Total$Winner)
h = step.up(j)
predict.plot(j)
predict.plot(h)
predict.plot(j, partial=T)
predict.plot(h, partial=T)
h
predict.plot(Winner~Coopertivity | Terms)
predict.plot(Winner~Coopertivity|Terms, Total)
predict.plot(Winner~Terms|Coopertivity, Total)
summary(h)
step(h)
i = step(h)
i
summary(i)
predict.plot(Winner~Terms|Coopertivity, Total, partial=T)
predict.plot(Winner~Terms|Coopertivity, Total, partial=j)
predict(i)
?predict
predict(i, type='response')
round(predict(i, type='response'))
table(round(predict(i, type='response')))
table(round(predict(h, type='response')))
table(round(predict(j, type='response')))
setwd("C:/Users/TimBo/Downloads/R docs and scripts/Kaggle/drivers/drivers/1")
source('C:/Users/TimBo/Downloads/R docs and scripts/Kaggle/read_trips.R')
files=read_trips(getwd())
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
scale_y_continuous(limits = range(files$y))+scale_x_continuous(limits=range(files$x))
geom_line(aes(color=trip))
library(ggplot2)
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
scale_y_continuous(limits = range(files$y))+scale_x_continuous(limits=range(files$x))+
geom_line(aes(color=trip))
i = 10
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
scale_y_continuous(limits = range(files$y))+scale_x_continuous(limits=range(files$x))+
geom_line(aes(color=trip))
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+scale_y_continuous(limits = range(files$y))+scale_x_continuous(limits=range(files$x))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
range(files$y)
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(c(-9112.1,16258.2))
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(c(-9112.1,16258.2))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(c(-9112.1,16258.2))+xlim()+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
range(files$d)
range(files$x)
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(c(-9112.1,16258.2))+xlim(c(-16843.9,15320.0))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
i=100
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(c(-9112.1,16258.2))+xlim(c(-16843.9,15320.0))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
i=10000
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(c(-9112.1,16258.2))+xlim(c(-16843.9,15320.0))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
lapply(1:max(files$time), function(i) print files[files$time <= i,])
lapply(1:max(files$time), function(i) print(files[files$time <= i,]))
lapply(1:max(files$time), function(i) print(i))
?qnorm
lapply(1:(max(files$time)/10), function(i) print(files[files$time <= i,]))
lapply(1:(max(files$time)/100), function(i) print(files[files$time <= i,]))
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(range(files$y))+xlim(range(files$x))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
1=10
i=10
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(range(files$y))+xlim(range(files$x))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
i=100
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(range(files$y))+xlim(range(files$x))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
i=1000
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(range(files$y))+xlim(range(files$x))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_line(aes(color=trip))
ggplot(files[files$time <= i,], aes(x=x,y=y,group=trip))+ylim(range(files$y))+xlim(range(files$x))+
theme(axis.text.y=element_blank(), axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.x=element_blank(),
panel.border=element_blank(), panel.background=element_blank(),
axis.ticks = element_blank(), legend.position='none')+
geom_path(aes(color=trip))
saveHTML(trip_animation(), autoplay = FALSE, loop = FALSE, verbose = TRUE, outdir = "images",
single.opts = "'controls': ['first', 'previous', 'play', 'next', 'last', 'loop', 'speed'], 'delayMin': 0")
library(animation)
saveHTML(trip_animation(), autoplay = FALSE, loop = FALSE, verbose = TRUE, outdir = "images",
single.opts = "'controls': ['first', 'previous', 'play', 'next', 'last', 'loop', 'speed'], 'delayMin': 0")
source('C:/Users/TimBo/Downloads/R docs and scripts/Kaggle/plot_animation.R')
saveHTML(trip_animation(), autoplay = FALSE, loop = FALSE, verbose = TRUE, outdir = "images",
single.opts = "'controls': ['first', 'previous', 'play', 'next', 'last', 'loop', 'speed'], 'delayMin': 0")
setwd("C:/Users/TimBo/Downloads/R docs and scripts/Kaggle")
